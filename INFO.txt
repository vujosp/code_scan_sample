Module 1:
    * requirements.txt, we are expecting to get license and vulnerability for every package in requirements.txt
    * additional dev_reqs.txt, same as above, but file isn't usual name, such as requirements.txt.
    * Submodule with it's own requirements.txt, we are expecting those to be caught as well.
    * There is python package (plyfile) with GPL license, we are expecting those to be caught and flagged.
    * There is python package (DVC) with Apache License 2.0 license but use dependent on another python package (Grandalf) that have GPL 2.0 license.

Module 2:
    * requirements.txt that point to another requirements files, this is valid but not so common way to have dependencies in python.
    * github repo in requirements.txt, there is one requirement that doesn't take package from usual repository, but from github.

Module 3:
    * dockerfile install ffmpeg (GPL), will those be flagged?
    * s.Dockerfile install ffmpeg (GPL), will those be flagged, since dockerfile doesn't have common name dockerfile, but still have proper extension?
    * docker_buildfile install ffmpeg (GPL), will those be flagged, dockerfile doesn't have common name dockerfile nor proper extension?
    * install.sh install ffmpeg (GPL), will those be flagged?
    * install script install pip package with specific repository, torch in this case.
    * install script install another module from monorepo, how are those handled?

Module 4:
    There is wheel that need to be installed as well, does it look for license of this wheel and dependencies of wheel itself?
    There are some additional libraries defined inside setup.py, will those be caught?

Module 5:
    There is Pipfile and Pipfile.lock files, this is one way to specify dependencies in python. Are those caught? 
    There is one package (Django) that is installed from git and not usual python repository.
    There is one License file (pravila_koriscena) with name that isn't usual, such as LICENSE.
    License file is different from parent license, those will be flagged?

Module 6:
    This module have MIT license.
    There is GNU license defined in code/a.py.
    code/b.py is exactly same file but without license header.
    code/c.py only takes some parts of code from code/a.py but don't have license header.
    code/d.py in header it state it's taken from some github repo, with link to file that have proper license. How are those flagged?
    code/e.py in header it state there is license defined in different folder with link to folder. How are those flagged?
    code/f.py non classic license info, that prohibit commercial usage.

Module 7:
    There is git submodule that have different license. Will those be caught since github submodules are not downloaded by default.